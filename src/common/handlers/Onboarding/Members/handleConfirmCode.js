const axios = require('axios');
const userService = require('../../../services/userService');
const sendMessageTarget = require('../../../services/Wp-Envio-Msj/sendMessageTarget');
const getUserInfo = require('../../../services/getUserInfo');
const scheduleTask = require('../../../services/cloudTasksService');
const LLM = require('../../../handlers/LLM/LLM');

const handleConfirmCode = async (senderId, receivedMessage) => {
  console.log(`üì© Mensaje recibido de ${senderId}: ${receivedMessage}`);

  // üïí Si el usuario quiere que le recuerdes despu√©s
  if (receivedMessage === 'recordar') {
    const dateTime = new Date(Date.now() + 3600 * 1000); // 1 hora despu√©s
    const taskName = `recordatorio-${senderId}-${Date.now()}`;
    const payload = { senderId, type: 'recordar', taskName };

    await scheduleTask(payload, dateTime, taskName);
    await sendMessageTarget(senderId, '‚úÖ Muy bien, yo te recuerdo en 1 hora.');
    return;
  }

  // üö´ Si no respondi√≥ "s√≠", ejecutar LLM y enviar botones de nuevo
  if (receivedMessage !== 'si') {
    // Activar LLM directamente
    await LLM(senderId, receivedMessage);

    const randomMessages = [
      'üöÄ ¬øListo para que te env√≠e el c√≥digo? üì©',
      'üì¨ ¬øQuieres que te env√≠e ahora el c√≥digo de verificaci√≥n?',
      'üîê ¬øDeseas recibir tu c√≥digo de verificaci√≥n en este momento?',
      'üí° Si ya est√°s listo, puedo enviarte el c√≥digo. ¬øLo hacemos?',
      'üïò ¬øTe mando el c√≥digo ahora o prefieres que te recuerde en 1 hora?'
    ];

    const randomMsg = randomMessages[Math.floor(Math.random() * randomMessages.length)];
    const buttons = [
      { id: 'si', title: 'S√≠' },
      { id: 'recordar', title: 'Recordarme en 1h' }
    ];

    await sendMessageTarget(senderId, randomMsg, buttons);
    return;
  }

  // ‚úÖ El usuario dijo "s√≠", se env√≠a el c√≥digo
  const userInfo = await getUserInfo(senderId);
  const { userId } = userInfo;

  await sendValidationCode(userId);

  const requestEmailMessage = 'Listo, c√≥digo enviado. ‚ö†Ô∏è‚ö†Ô∏è Por favor revisa el c√≥digo en bandeja de entrada y SPAM (correo no deseado)‚ö†Ô∏è‚ö†Ô∏è';
  await sendMessageTarget(senderId, requestEmailMessage);

  const buttons = [
    { id: 'codigo_recibido', title: 'S√≠, me lleg√≥' },
    { id: 'codigo_no_recibido', title: 'No me lleg√≥' }
  ];
  await sendMessageTarget(senderId, 'üîë ¬øTe lleg√≥ el c√≥digo de verificaci√≥n?', buttons);

  await userService.updateUser(senderId, { state: 'confirmar_codigo_email', verified_email_code: 0 });
  console.log(`‚úÖ Estado actualizado a 'confirmar_codigo_email'`);
};

// üì§ Funci√≥n para enviar el c√≥digo
const sendValidationCode = async (userId) => {
  try {
    console.log(`üì® Enviando c√≥digo de validaci√≥n a userId: ${userId}`);
    const response = await axios.post(
      process.env.VALIDATION_CODE,
      { id: userId },
      { headers: { 'Content-Type': 'application/json' } }
    );
    console.log('‚úÖ C√≥digo de validaci√≥n enviado:', response.data);
  } catch (error) {
    console.error('‚ùå Error al enviar el c√≥digo de validaci√≥n:', error.message);
  }
};

module.exports = handleConfirmCode;
